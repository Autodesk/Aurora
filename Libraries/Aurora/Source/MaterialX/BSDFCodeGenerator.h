// Copyright 2022 Autodesk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#pragma once

#include <MaterialXCore/Generated.h>

// Forward declare MaterialX types.
MATERIALX_NAMESPACE_BEGIN

class Document;
class FileSearchPath;
class ShaderGenerator;
class GenContext;
class ShaderStage;
class ShaderInput;
class Value;
class UnitConverterRegistry;
class UnitSystem;
class ShaderNode;

MATERIALX_NAMESPACE_END

#include "Properties.h"

BEGIN_AURORA

namespace MaterialXCodeGen
{

// Forward declare shader class (used internally for codegen)
class BSDFCodeGeneratorShader;
class BSDFShaderGenerator;

/// MaterialX code generator for BSDF and material setup.GLSL code for pathtracing.
/// TODO: Currently only generates the material setup function and associated metadata, not the
/// BSDF.
class BSDFCodeGenerator
{
public:
    // The MaterialX units.
    struct Units
    {
        // Unit names.
        std::vector<string> names;
        // Indices for units used in shaders.
        std::map<string, int> indices;
    };

    /// Material argument details.
    struct MaterialArgument
    {
        /// Argument name
        string name;
        /// Argument type as GLSL string
        IValues::Type type;
        /// True if output argument.
        bool isOutput;
        /// Pointer to default value (nullptr for output values)
        Value* pDefaultValue;
    };

    /// Code generation result.
    struct Result
    {
        /// Unique hash for the generated code.
        size_t functionHash;
        /// \brief The generated GLSL code for material setup function.
        /// \desc The setup function takes a set of material inputs from CPU and outputs the
        /// parameters of the standard surface material, based on a materialX network.
        string materialSetupCode;
        /// \desc The name of the setup function .
        string setupFunctionName;
        /// \brief Vector of input and output arguments used by the setup function.
        vector<MaterialArgument> argumentsUsed;
        /// \brief Vector of default values for the material inputs.
        vector<Value> defaultInputValues;
    };

    /// Maps a MaterialX parameter (either input or output) to an argument in the generated setup
    /// function. Returns empty string to indicate parameter is not mapped.
    using ParameterMappingFunction = function<string(
        const string& inputParameter, IValues::Type type, const string& topLevelShaderName)>;

    /// \param surfaceShaderNodeCategory The surface shader category to code generate material
    /// inputs for. \param mtlxPath The search path for the materialX assets, including the library
    /// assets in the 'libraries' folder.
    BSDFCodeGenerator(const string& mtlxPath = "./MaterialX", const string& = "standard_surface");

    ~BSDFCodeGenerator();

    /// \desc Run the code generator on a MaterialX document.
    /// \param.document MaterialX XML document string.
    /// \param inputParameterMapper Function used to map a parameter in the MaterialX network an
    /// input parameter in the setup function. \param outputParameterMapper Function used to map a
    /// parameter in the MaterialX network an ouput parameter in the setup function. \param
    /// pResultOut Code generation result output.
    bool generate(const string& document, Result* pResultOut,
        ParameterMappingFunction inputParameterMapper,
        ParameterMappingFunction outputParameterMapper = nullptr,
        const string& overrideDocumentName             = "");

    /// \desc Generate the shared GLSL definitions for all the documents generated by this
    /// generator. Will clear the shared definitions.
    /// \param pDefinitionCodeOut GLSL definition string.
    int generateDefinitions(string* pDefinitionCodeOut);

    /// Clear the definition shader code, which is accumulated after each generateDefinitions call.
    void clearDefinitions();

    // Get the units used by materialX.
    const Units& units() { return _units; }

protected:
    // Convert GLSL type string to Aurora type (asserts if conversion fails.)
    IValues::Type glslTypeToAuroraType(const string glslType);

    // Convert materialX value to Aurora value (asserts if conversion fails.)
    bool materialXValueToAuroraValue(Value* pValueOut, shared_ptr<MaterialX::Value> pMtlXValue);

    // Process a MaterialX shader input.
    void processInput(MaterialX::ShaderInput* input,
        shared_ptr<BSDFCodeGeneratorShader> pBSDFGenShader, const string& outputVariable,
        string* pSourceOut);

    // Create the static MaterialX standard library.
    void createStdLib();

    // Static MaterialX standard library.
    static shared_ptr<MaterialX::Document> s_pStdLib;

    // The GLSL shader generator used internally.
    shared_ptr<BSDFShaderGenerator> _pGenerator;

    // The shader context used internally.
    unique_ptr<MaterialX::GenContext> _pGeneratorContext;

    // Current active material inputs and outputs.
    map<string, string> _activeOutputs;
    map<string, pair<string, shared_ptr<MaterialX::Value>>> _activeInputs;
    vector<string> _activeInputNames;
    vector<string> _activeOutputNames;

    // Definition look-up.
    map<string, size_t> _definitionMap;
    vector<string> _definitions;

    // Suffix added to material inputs.
    string _materialInputSuffix  = "In";
    string _materialOutputSuffix = "";

    // The surface shader category to code generate inputs for.
    string _surfaceShaderNodeCategory;

    // The units for MaterialX;
    Units _units;

    shared_ptr<MaterialX::UnitSystem> _unitSystem;
    shared_ptr<MaterialX::UnitConverterRegistry> _unitRegistry;
    set<MaterialX::ShaderNode*> _processedNodes;
    ParameterMappingFunction _defaultOutputMapper;
    map<string, string> _defaultOutputParamMapping;
    string _topLevelShaderNodeName;
    string _mtlxLibPath;

    ParameterMappingFunction _currentInputParameterMapper;
    ParameterMappingFunction _currentOutputParameterMapper;
};

} // namespace MaterialXCodeGen

END_AURORA
