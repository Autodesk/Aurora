// Copyright 2023 Autodesk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#ifndef __EVALUATE_MATERIAL_H__
#define __EVALUATE_MATERIAL_H__

// Pre-processor define to enable runtime compiled evaluateMaterialForShader function. 
#if RUNTIME_COMPILE_EVALUATE_MATERIAL_FUNCTION

// Declaration for runtime generated evaluate material function.  Generated by PTShaderLibrary and linked in at runtime.
Material evaluateMaterialForShader(
    int shaderIndex, ShadingData shading, int mtlOffset, out float3 materialNormal, out bool isGeneratedNormal);

#else

// Ignore the shaderIndex and assume all materials use default shader.
Material evaluateMaterialForShader(
    int shaderIndex, ShadingData shading, int mtlOffset, out float3 materialNormal, out bool isGeneratedNormal)    
{

    mtlOffset = mtlOffset + kMaterialHeaderSize;

    return evaluateDefaultMaterial(
        shading, mtlOffset,
        materialNormal, isGeneratedNormal);
}

#endif

#endif
